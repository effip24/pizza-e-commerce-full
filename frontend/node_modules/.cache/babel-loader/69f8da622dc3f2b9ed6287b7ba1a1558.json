{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport cloudinaryApi from \"../utils/CloudinaryApi\";\n\nfunction CloudinaryFormValidator() {\n  _s();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(true);\n  const [uploadState, setUploadState] = useState(\"upload\");\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n    setErrors({ ...errors,\n      [name]: e.target.validationMessage\n    });\n    setIsValid(e.target.closest(\"form\").checkValidity());\n  };\n\n  const handleFileUpload = e => {\n    const {\n      name\n    } = e.target;\n    const files = e.target.files;\n    const data = new FormData();\n    data.append(\"file\", files[0]);\n    data.append(\"upload_preset\", \"zlwnk5wk\");\n    setUploadState(\"uploading...\");\n    cloudinaryApi.uploadImage(data).then(img => {\n      setValues({ ...values,\n        [name]: img.secure_url\n      });\n      setIsValid(e.target.closest(\"form\").checkValidity());\n    }).catch(err => {\n      setErrors({ ...errors,\n        [\"file\"]: `${err} incorrect file type, please upload image only!`\n      });\n    }).finally(() => {\n      setUploadState(\"done\");\n    });\n    e.target.value = null;\n  };\n\n  const resetForm = useCallback(function () {\n    let newValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let newErrors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let newIsValid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    setValues(newValues);\n    setErrors(newErrors);\n    setIsValid(newIsValid);\n    setUploadState(\"upload\");\n  }, [setValues, setErrors, setIsValid]);\n  return {\n    values,\n    handleChange,\n    errors,\n    isValid,\n    resetForm,\n    setValues,\n    setIsValid,\n    handleFileUpload,\n    uploadState,\n    setUploadState\n  };\n}\n\n_s(CloudinaryFormValidator, \"42s4jtSR4I/f9UtZbFyqHdfEjdk=\");\n\n_c = CloudinaryFormValidator;\nexport default CloudinaryFormValidator;\n\nvar _c;\n\n$RefreshReg$(_c, \"CloudinaryFormValidator\");","map":{"version":3,"sources":["/Users/effiphil/Desktop/pizza-e-commerce-full/frontend/src/utils/CloudinaryFormValidator.js"],"names":["useState","useCallback","cloudinaryApi","CloudinaryFormValidator","values","setValues","errors","setErrors","isValid","setIsValid","uploadState","setUploadState","handleChange","e","name","value","target","validationMessage","closest","checkValidity","handleFileUpload","files","data","FormData","append","uploadImage","then","img","secure_url","catch","err","finally","resetForm","newValues","newErrors","newIsValid"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\nimport cloudinaryApi from \"../utils/CloudinaryApi\";\n\nfunction CloudinaryFormValidator() {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(true);\n  const [uploadState, setUploadState] = useState(\"upload\");\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setValues({ ...values, [name]: value });\n    setErrors({ ...errors, [name]: e.target.validationMessage });\n    setIsValid(e.target.closest(\"form\").checkValidity());\n  };\n\n  const handleFileUpload = (e) => {\n    const { name } = e.target;\n    const files = e.target.files;\n    const data = new FormData();\n\n    data.append(\"file\", files[0]);\n    data.append(\"upload_preset\", \"zlwnk5wk\");\n\n    setUploadState(\"uploading...\");\n\n    cloudinaryApi\n      .uploadImage(data)\n      .then((img) => {\n        setValues({ ...values, [name]: img.secure_url });\n        setIsValid(e.target.closest(\"form\").checkValidity());\n      })\n      .catch((err) => {\n        setErrors({ ...errors, [\"file\"]: `${err} incorrect file type, please upload image only!` });\n      })\n      .finally(() => {\n        setUploadState(\"done\");\n      });\n    e.target.value = null;\n  };\n\n  const resetForm = useCallback(\n    (newValues = {}, newErrors = {}, newIsValid = false) => {\n      setValues(newValues);\n      setErrors(newErrors);\n      setIsValid(newIsValid);\n      setUploadState(\"upload\");\n    },\n    [setValues, setErrors, setIsValid]\n  );\n\n  return {\n    values,\n    handleChange,\n    errors,\n    isValid,\n    resetForm,\n    setValues,\n    setIsValid,\n    handleFileUpload,\n    uploadState,\n    setUploadState,\n  };\n}\nexport default CloudinaryFormValidator;\n"]},"metadata":{},"sourceType":"module"}