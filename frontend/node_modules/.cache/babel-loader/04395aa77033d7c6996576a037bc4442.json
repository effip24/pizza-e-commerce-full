{"ast":null,"code":"class MainApi {\n  /** constructor of MainApi class.\n   * @param  baseUrl - the URL to make the request to.\n   */\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  updateToken(token) {\n    this._headers.authorization = `Bearer ${token}`;\n  }\n\n  checkToken() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  register(email, password, name) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  login(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  getMenu() {\n    return fetch(`${this._baseUrl}/menu`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  addToMenu(pizza) {\n    return fetch(`${this._baseUrl}/menu`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        url: pizza.url,\n        name: pizza.name,\n        text: pizza.text,\n        price: pizza.price\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  removeFromMenu(pizzaId) {\n    return fetch(`${this._baseUrl}/menu/${pizzaId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  updateMenu(pizza, pizzaId) {\n    console.log(pizzaId);\n    return fetch(`${this._baseUrl}/menu/${pizzaId}`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: pizza.name,\n        text: pizza.text,\n        price: pizza.price\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  createOrder(order) {\n    return fetch(`${this._baseUrl}/orders`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        firstName: order.firstName,\n        lastName: order.lastName,\n        address: order.address,\n        phone: order.phone,\n        notes: order.notes || \"none\",\n        total: order.total,\n        billing: order.billing\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  getOrders() {\n    return fetch(`${this._baseUrl}/orders`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  getOrder(phone) {\n    return fetch(`${this._baseUrl}/orders/${phone}`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  getOrderStatus(orderId) {\n    return fetch(`${this._baseUrl}/orders/status/${orderId}`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n  setOrderStatus(orderId, status) {\n    return fetch(`${this._baseUrl}/orders/status/${orderId}`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        status: status\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n\n}\n\nconst mainApi = new MainApi({\n  baseUrl: \"https://pizza-e-commerce-api.herokuapp.com\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    authorization: \"\"\n  }\n});\nexport default mainApi;","map":{"version":3,"sources":["/Users/effiphil/Desktop/pizza-e-commerce-full/frontend/src/utils/MainApi.js"],"names":["MainApi","constructor","baseUrl","headers","_baseUrl","_headers","_checkResponse","res","ok","json","Promise","reject","status","updateToken","token","authorization","checkToken","fetch","method","then","register","email","password","name","body","JSON","stringify","login","getMenu","addToMenu","pizza","url","text","price","removeFromMenu","pizzaId","updateMenu","console","log","createOrder","order","firstName","lastName","address","phone","notes","total","billing","getOrders","getOrder","getOrderStatus","orderId","setOrderStatus","mainApi"],"mappings":"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","sourcesContent":["class MainApi {\n  /** constructor of MainApi class.\n   * @param  baseUrl - the URL to make the request to.\n   */\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n\n  updateToken(token) {\n    this._headers.authorization = `Bearer ${token}`;\n  }\n\n  checkToken() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: this._headers,\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  register(email, password, name) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({ name, email, password }),\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  login(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({ email, password }),\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  getMenu() {\n    return fetch(`${this._baseUrl}/menu`, {\n      method: \"GET\",\n      headers: this._headers,\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  addToMenu(pizza) {\n    return fetch(`${this._baseUrl}/menu`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        url: pizza.url,\n        name: pizza.name,\n        text: pizza.text,\n        price: pizza.price,\n      }),\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  removeFromMenu(pizzaId) {\n    return fetch(`${this._baseUrl}/menu/${pizzaId}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  updateMenu(pizza, pizzaId) {\n    console.log(pizzaId);\n    return fetch(`${this._baseUrl}/menu/${pizzaId}`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: pizza.name,\n        text: pizza.text,\n        price: pizza.price,\n      }),\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  createOrder(order) {\n    return fetch(`${this._baseUrl}/orders`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        firstName: order.firstName,\n        lastName: order.lastName,\n        address: order.address,\n        phone: order.phone,\n        notes: order.notes || \"none\",\n        total: order.total,\n        billing: order.billing,\n      }),\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  getOrders() {\n    return fetch(`${this._baseUrl}/orders`, {\n      method: \"GET\",\n      headers: this._headers,\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  getOrder(phone) {\n    return fetch(`${this._baseUrl}/orders/${phone}`, {\n      method: \"GET\",\n      headers: this._headers,\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  getOrderStatus(orderId) {\n    return fetch(`${this._baseUrl}/orders/status/${orderId}`, {\n      method: \"GET\",\n      headers: this._headers,\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n\n  setOrderStatus(orderId, status) {\n    return fetch(`${this._baseUrl}/orders/status/${orderId}`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        status: status,\n      }),\n    }).then((res) => {\n      return this._checkResponse(res);\n    });\n  }\n}\n\nconst mainApi = new MainApi({\n  baseUrl: \"https://pizza-e-commerce-api.herokuapp.com\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    authorization: \"\",\n  },\n});\n\nexport default mainApi;\n"]},"metadata":{},"sourceType":"module"}